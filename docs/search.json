[
  {
    "objectID": "Programming_Basics.html#welcome-to-r",
    "href": "Programming_Basics.html#welcome-to-r",
    "title": "Programming basics",
    "section": "Welcome to R",
    "text": "Welcome to R\nIn this tutorial, you’ll learn about:\n\nfunctions and their arguments\nobjects\nR’s basic data types\nR’s basic data structures including vectors and lists\nR’s package system"
  },
  {
    "objectID": "Programming_Basics.html#functions",
    "href": "Programming_Basics.html#functions",
    "title": "Programming basics",
    "section": "Functions",
    "text": "Functions\n\n\n\n\n\n\n\nRun a function\n\n\n\nCan you use the sqrt() function in the chunk below to compute the square root of 962?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nsqrt(962)\nsqrt(962)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamine the function code\n\n\n\nUse the code chunk below to examine the code that sqrt() runs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nsqrt\nsqrt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsqrt vs. lm\n\n\n\nCompare the code in sqrt() to the code in another R function, lm(). Examine lm()’s code body in the chunk below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlm\nlm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp pages\n\n\n\nWow! lm() runs a lot of code. What does it do? Open the help page for lm() in the chunk below and find out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n?lm\n?lm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode comments\n\n\n\nWhat do you think the chunk below will return? Run it and see. The result should be nothing. R will not run anything on a line after a # symbol. This is useful because it lets you write human readable comments in your code: just place the comments after a #. Now delete the # and re-run the chunk. You should see a result.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nsqrt(962)\nsqrt(962)"
  },
  {
    "objectID": "Programming_Basics.html#arguments",
    "href": "Programming_Basics.html#arguments",
    "title": "Programming basics",
    "section": "Arguments",
    "text": "Arguments\n\n\n\n\n\n\n\nFind function arguments\n\n\n\nrnorm() is a function that generates random variables from a normal distribution. Find the arguments of rnorm().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nargs(rnorm)\nargs(rnorm)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptional arguments\n\n\n\nWhich arguments of rnorm are optional?\n\n\n\n\nn\n\n\nmean\n\n\nsd\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing multiple arguments\n\n\n\nUse rnrom() to generate 100 random normal values with a mean of 100 and a standard deviation of 15.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nrnorm(100, mean = 100, sd = 50)\nrnorm(100, mean = 100, sd = 50)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpot the flaw\n\n\n\nCan you spot the error in the code below? Fix the code and then re-run it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nrnorm(100, mean = 100, sd = 50)\nrnorm(100, mean = 100, sd = 50)"
  },
  {
    "objectID": "Programming_Basics.html#objects",
    "href": "Programming_Basics.html#objects",
    "title": "Programming basics",
    "section": "Objects",
    "text": "Objects\n\nYou can choose almost any name you like for an object, as long as the name does not begin with a number or a special character like +, -, *, /, ^, !, @, or &.\n\n\n\n\n\n\nObject names\n\n\n\nWhich of these would be valid object names?\n\n\n\n\ntoday\n\n\n1st\n\n\n+1\n\n\nvars\n\n\n\\^_^\n\n\nfoo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing objects\n\n\n\nIn the code chunk below, save the results of rnorm(100, mean = 100, sd = 15) to an object named data. Then, on a new line, call the hist() function on data to plot a histogram of the random values.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ndata &lt;- rnorm(100, mean = 100, sd = 15)\nhist(data)\ndata &lt;- rnorm(100, mean = 100, sd = 15)\nhist(data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat if?\n\n\n\nWhat do you think would happen if you assigned data to a new object named copy, like this? Run the code and then inspect both data and copy.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ndata &lt;- rnorm(100, mean = 100, sd = 15)\ncopy &lt;- data\ndata\ncopy\ndata &lt;- rnorm(100, mean = 100, sd = 15)\ncopy &lt;- data\ndata\ncopy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData sets\n\n\n\nObjects provide an easy way to store data sets in R. In fact, R comes with many toy data sets pre-loaded. Examine the contents of iris to see a classic toy data set. Hint: how could you learn more about the iris object?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\niris\niris\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrm()\n\n\n\nWhat if you accidentally overwrite an object? If that object came with R or one of its packages, you can restore the original version of the object by removing your version with rm(). Run rm() on iris below to restore the iris data set.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\niris &lt;- 1\niris\nrm(iris)\niris\niris &lt;- 1\niris\nrm(iris)\niris"
  },
  {
    "objectID": "Programming_Basics.html#vectors",
    "href": "Programming_Basics.html#vectors",
    "title": "Programming basics",
    "section": "Vectors",
    "text": "Vectors\n\n\n\n\n\n\n\nCreate a vector\n\n\n\nIn the chunk below, create a vector that contains the integers from one to ten.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nc(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nc(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe : shortcut\n\n\n\nIf your vector contains a sequence of contiguous integers, you can create it with the : shortcut. Run 1:10 in the chunk below. What do you get? What do you suppose 1:20 would return?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n1:10\n1:10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nElement extraction\n\n\n\nYou can extract any element of a vector by placing a pair of brackets behind the vector. Inside the brackets place the number of the element that you’d like to extract. For example, vec[3] would return the third element of the vector named vec. Use the chunk below to extract the fourth element of vec.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nvec &lt;- c(1, 2, 4, 8, 16)\nvec[4]\nvec &lt;- c(1, 2, 4, 8, 16)\nvec[4]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVector subsetting\n\n\n\nYou can also use [] to extract multiple elements of a vector. Place the vector c(1,2,5) between the brackets below. What does R return?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nvec &lt;- c(1, 2, 4, 8, 16)\nvec[c(1,2,5)]\nvec &lt;- c(1, 2, 4, 8, 16)\nvec[c(1,2,5)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNames\n\n\n\nIf the elements of your vector have names, you can extract them by name. To do so place a name or vector of names in the brackets behind a vector. Surround each name with quotation marks, e.g. vec2[c(\"alpha\", \"beta\")].\nExtract the element named gamma from the vector below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nvec2 &lt;- c(alpha = 1, beta = 2, gamma = 3)\nvec2[\"gamma\"]\nvec2 &lt;- c(alpha = 1, beta = 2, gamma = 3)\nvec2[\"gamma\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVectorised operations\n\n\n\nPredict what the code below will return. Then look at the result.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nc(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nc(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVector recycling\n\n\n\nPredict what the code below will return. Then look at the result.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\n1 + c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n1 + c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
  },
  {
    "objectID": "Programming_Basics.html#types",
    "href": "Programming_Basics.html#types",
    "title": "Programming basics",
    "section": "Types",
    "text": "Types\n\n\n\n\n\n\n\nAtomic types\n\n\n\nWhich of these is not an atomic data type?\n\n\n\n\nnumeric/double\n\n\ninteger\n\n\ncharacter\n\n\nlogical\n\n\ncomplex\n\n\nraw\n\n\nsimple\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat type?\n\n\n\nWhat type of data is \"1L\"?\n\n\n\n\nnumeric/double\n\n\ninteger\n\n\ncharacter\n\n\nlogical\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntegers\n\n\n\nCreate a vector of integers from one to five. Can you imagine why you might want to use integers instead of numbers/doubles?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nc(1L, 2L, 3L, 4L, 5L)\nc(1L, 2L, 3L, 4L, 5L)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFloating point arithmetic\n\n\n\nComputers must use a finite amount of memory to store decimal numbers (which can sometimes require infinite precision). As a result, some decimals can only be saved as very precise approximations. From time to time you’ll notice side effects of this imprecision, like below.\nCompute the square root of two,square the answer (e.g. multiply the square root of two by the square root of two), and then subtract two from the result. What answer do you expect? What answer do you get?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nsqrt(2) * sqrt(2) - 2\nsqrt(2)^2 - 2\nsqrt(2) * sqrt(2) - 2\nsqrt(2)^2 - 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVectors\n\n\n\nHow many types of data can you put into a single vector?\n\n\n\n\n1\n\n\n6\n\n\nAs many as you like\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacter or object?\n\n\n\nOne of the most common mistakes in R is to call an object when you mean to call a character string and vice versa.\nWhich of these are object names? What is the difference between object names and character strings?\n\n\n\n\nfoo\n\n\n\"num\"\n\n\nmu\n\n\n\"sigma\"\n\n\n\"data\"\n\n\na"
  },
  {
    "objectID": "Programming_Basics.html#lists",
    "href": "Programming_Basics.html#lists",
    "title": "Programming basics",
    "section": "Lists",
    "text": "Lists\n\n\n\n\n\n\n\nLists vs. vectors\n\n\n\nWhich data structure(s) could you use to store these pieces of data in the same object? 1001, TRUE, \"stories\".\n\n\n\n\na vector\n\n\na list\n\n\nneither\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMake a list\n\n\n\nMake a list that contains the elements 1001, TRUE, and \"stories\". Give each element a name.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlist(number = 1001, logical = TRUE, string = \"stories\")\nlist(number = 1001, logical = TRUE, string = \"stories\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExtract an element\n\n\n\nExtract the number 1001 from the list below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nthings &lt;- list(number = 1001, logical = TRUE, string = \"stories\")\nthings$number\nthings &lt;- list(number = 1001, logical = TRUE, string = \"stories\")\nthings$number\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Frames\n\n\n\nYou can make a data frame with the data.frame() function, which works similar to c(), and list(). Assemble the vectors below into a data frame with the column names numbers, logicals, strings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nnums &lt;- c(1, 2, 3, 4)\nlogs &lt;- c(TRUE, TRUE, FALSE, TRUE)\nstrs &lt;- c(\"apple\", \"banana\", \"carrot\", \"duck\")\ndata.frame(numbers = nums, logicals = logs, strings = strs)\nnums &lt;- c(1, 2, 3, 4)\nlogs &lt;- c(TRUE, TRUE, FALSE, TRUE)\nstrs &lt;- c(\"apple\", \"banana\", \"carrot\", \"duck\")\ndata.frame(numbers = nums, logicals = logs, strings = strs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExtract a column\n\n\n\nGiven that a data frame is a type of list (with named elements), how could you extract the strings column of the following df data frame?\nnums &lt;- c(1, 2, 3, 4)\nlogs &lt;- c(TRUE, TRUE, FALSE, TRUE)\nstrs &lt;- c(\"apple\", \"banana\", \"carrot\", \"duck\")\ndf &lt;- data.frame(numbers = nums, logicals = logs, strings = strs)\nExtract the strings column below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ndf$strings\ndf$strings"
  },
  {
    "objectID": "Programming_Basics.html#packages",
    "href": "Programming_Basics.html#packages",
    "title": "Programming basics",
    "section": "Packages",
    "text": "Packages\n\n\n\n\n\n\n\nA common error\n\n\n\nWhat does this common error message suggest? object _____ does not exist.\n\n\n\n\nYou misspelled your object name\n\n\nYou've forgot to load the package that ____ comes in\n\n\nEither\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad a package\n\n\n\nIn the code chunk below, load the tidyverse package. Whenever you load a package R will also load all of the packages that the first package depends on. tidyverse takes advantage of this to create a shortcut for loading several common packages at once. Whenever you load tidyverse, tidyverse also loads ggplot2, dplyr, tibble, tidyr, readr, and purrr.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(tidyverse)\n\n\n\n\n\n\n\n\n\n\n\nDid you know, library() is a special function in R? You can pass library() a package name in quotes, like library(\"tidyverse\"), or not in quotes, like library(tidyverse)—both will work! That’s often not the case with R functions.\nIn general, you should always use quotes unless you are writing the name of something that is already loaded into R’s memory, like a function, vector, or data frame.\n\n\n\n\n\n\nInstall packages\n\n\n\nBut what if the package that you want to load is not installed on your computer? How would you install the dplyr package on your own computer?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\ninstall.packages(\"dplyr\")\ninstall.packages(\"dplyr\")\n\n\n\n\n\n\n\n\n\n\n\nCongratulations. You now have a formal sense for how the basics of R work. Although you may think of your self as a Data Scientist, this brief Computer Science background will help you as you analyze data. Whenever R does something unexpected, you can apply your knowledge of how R works to figure out what went wrong."
  }
]